// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TurkAk.Server.Data;

#nullable disable

namespace TurkAk.Server.Migrations
{
    [DbContext(typeof(TurkAkDbContext))]
    partial class TurkAkDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TurkAk.Server.Models.Customer", b =>
            {
                b.Property<int>("CustomersId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasColumnName("customers_id");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomersId"));

                b.Property<string>("AccountType")
                    .IsRequired()
                    .HasMaxLength(8)
                    .HasColumnType("nvarchar(8)")
                    .HasColumnName("account_type");

                b.Property<string>("BrandInfo")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("brand_info");

                b.Property<string>("City")
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnType("nvarchar(20)")
                    .HasColumnName("city");

                b.Property<string>("Country")
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnType("nvarchar(20)")
                    .HasColumnName("country");

                b.Property<string>("CustomersAddress")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("customers_address");

                b.Property<string>("Email")
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnType("nvarchar(255)")
                    .HasColumnName("email");

                b.Property<string>("Files")
                    .IsRequired()
                    .HasMaxLength(40)
                    .HasColumnType("nvarchar(40)")
                    .HasColumnName("files");

                b.Property<string>("PhoneNumber")
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnType("nvarchar(255)")
                    .HasColumnName("phone_number");

                b.Property<string>("TaxNumber")
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnType("nvarchar(255)")
                    .HasColumnName("tax_number");

                b.Property<string>("Title")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("title");

                b.Property<string>("Website")
                    .HasMaxLength(255)
                    .HasColumnType("nvarchar(255)")
                    .HasColumnName("website");

                b.HasKey("CustomersId")
                    .HasName("PK__Customer__F30A2A00E36176FD");

                b.HasIndex(new[] { "TaxNumber" }, "UQ__Customer__8A87F631294F42A0")
                    .IsUnique();

                b.HasIndex(new[] { "Email" }, "UQ__Customer__AB6E6164385178C3")
                    .IsUnique();

                b.ToTable("Customers");
            });

            modelBuilder.Entity("TurkAk.Server.Models.CustomersCertificate", b =>
            {
                b.Property<int>("CertificateId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasColumnName("certificate_id");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CertificateId"));

                b.Property<DateTime>("CalibratorDate")
                    .HasColumnType("datetime")
                    .HasColumnName("calibrator_date");

                b.Property<int>("CalibratorEmployee")
                    .HasColumnType("int")
                    .HasColumnName("calibrator_employee");

                b.Property<string>("CalibratorLocation")
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnType("nvarchar(30)")
                    .HasColumnName("calibrator_location");

                b.Property<int>("Customer")
                    .HasColumnType("int")
                    .HasColumnName("customer");

                b.Property<string>("DeviceSerialNo")
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnType("nvarchar(30)")
                    .HasColumnName("device_serial_no");

                b.Property<int>("DeviceType")
                    .HasColumnType("int")
                    .HasColumnName("device_type");

                b.Property<DateTime>("FirstAirDate")
                    .HasColumnType("datetime")
                    .HasColumnName("first_air_date");

                b.Property<int>("ReferenceCalibrator")
                    .HasColumnType("int")
                    .HasColumnName("reference_calibrator");

                b.Property<int>("ReferenceCalibratorSerialNo")
                    .HasColumnType("int")
                    .HasColumnName("reference_calibrator_serial_no");

                b.Property<DateTime>("RevisionDate")
                    .HasColumnType("datetime")
                    .HasColumnName("revision_date");

                b.Property<string>("RevisionNote")
                    .HasMaxLength(255)
                    .HasColumnType("nvarchar(255)")
                    .HasColumnName("revision_note");

                b.HasKey("CertificateId")
                    .HasName("PK__Customer__E2256D319E802FAF");

                b.HasIndex(new[] { "CalibratorEmployee" }, "IX_CustomersCertificates_calibrator_employee");

                b.HasIndex(new[] { "Customer" }, "IX_CustomersCertificates_customer");

                b.HasIndex(new[] { "DeviceType" }, "IX_CustomersCertificates_device_type");

                b.HasIndex(new[] { "ReferenceCalibrator" }, "IX_CustomersCertificates_reference_calibrator");

                b.ToTable("CustomersCertificates");
            });

            modelBuilder.Entity("TurkAk.Server.Models.Employee", b =>
            {
                b.Property<int>("EmployeeId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasColumnName("employee_id");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                b.Property<string>("EmployeeNameSurname")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)")
                    .HasColumnName("employee_name_surname");

                b.Property<string>("EmployeePassword")
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnType("nvarchar(255)")
                    .HasColumnName("employee_password");

                b.Property<string>("EmployeeRole")
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnType("nvarchar(30)")
                    .HasColumnName("employee_role");

                b.Property<bool>("EmployeeStatus")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("bit")
                    .HasDefaultValue(true)
                    .HasColumnName("employee_status");

                b.Property<string>("EmployeeUserName")
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnType("nvarchar(30)")
                    .HasColumnName("employee_user_name");

                b.HasKey("EmployeeId")
                    .HasName("PK__Employee__C52E0BA8000C63BC");

                b.HasIndex(new[] { "EmployeeUserName" }, "UQ__Employee__0D5A3362AA1D4CF5")
                    .IsUnique();

                b.ToTable("Employee", (string)null);
            });

            modelBuilder.Entity("TurkAk.Server.Models.NewDeviceType", b =>
            {
                b.Property<int>("NewDeviceTypeId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasColumnName("new_device_type_id");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NewDeviceTypeId"));

                b.Property<string>("DeviceTypeComment")
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("device_type_comment");

                b.Property<string>("DeviceTypeName")
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnType("nvarchar(30)")
                    .HasColumnName("device_type_name");

                b.Property<int>("ReferenceCalibrator")
                    .HasColumnType("int")
                    .HasColumnName("reference_calibrator");

                b.HasKey("NewDeviceTypeId")
                    .HasName("PK__NewDevic__F7DD159BC7CFEEE9");

                b.HasIndex(new[] { "ReferenceCalibrator" }, "IX_NewDeviceType_reference_calibrator");

                b.ToTable("NewDeviceType", (string)null);
            });

            modelBuilder.Entity("TurkAk.Server.Models.ReferenceDeviceAdd", b =>
            {
                b.Property<int>("ReferenceDeviceId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasColumnName("reference_device_id");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReferenceDeviceId"));

                b.Property<string>("Comment")
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("comment");

                b.Property<string>("DeviceType")
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnType("nvarchar(30)")
                    .HasColumnName("device_type");

                b.Property<DateTime>("LastCalibratorDate")
                    .HasColumnType("datetime")
                    .HasColumnName("last_calibrator_date");

                b.Property<DateTime>("NextCalibratorDate")
                    .HasColumnType("datetime")
                    .HasColumnName("next_calibrator_date");

                b.Property<string>("ReferenceDeviceName")
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnType("nvarchar(30)")
                    .HasColumnName("reference_device_name");

                b.Property<string>("SerialNo")
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnType("nvarchar(30)")
                    .HasColumnName("serial_no");

                b.Property<bool>("Status")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("bit")
                    .HasDefaultValue(true)
                    .HasColumnName("status");

                b.HasKey("ReferenceDeviceId")
                    .HasName("PK__Referenc__AFD3770913A9EC86");

                b.HasIndex(new[] { "SerialNo" }, "UQ__Referenc__E545819271FBC952")
                    .IsUnique();

                b.ToTable("ReferenceDeviceAdd", (string)null);
            });

            modelBuilder.Entity("TurkAk.Server.Models.TurkAkacc", b =>
            {
                b.Property<int>("TurkakAccId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasColumnName("turkak_acc_id");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TurkakAccId"));

                b.Property<string>("Token")
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("token");

                b.Property<DateTime?>("TokenExpiry")
                    .HasColumnType("datetime")
                    .HasColumnName("token_expiry");

                b.Property<string>("TurkakAccPassword")
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("turkak_acc_password");

                b.Property<string>("TurkakAccUserName")
                    .HasMaxLength(30)
                    .HasColumnType("nvarchar(30)")
                    .HasColumnName("turkak_acc_user_name");

                b.HasKey("TurkakAccId")
                    .HasName("PK__TurkAKAc__2E3FEC7A93186D48");

                b.ToTable("TurkAKAcc", (string)null);
            });

            modelBuilder.Entity("TurkAk.Server.Models.CustomersCertificate", b =>
            {
                b.HasOne("TurkAk.Server.Models.Employee", "CalibratorEmployeeNavigation")
                    .WithMany("CustomersCertificates")
                    .HasForeignKey("CalibratorEmployee")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired()
                    .HasConstraintName("FK__Customers__calib__49C3F6B7");

                b.HasOne("TurkAk.Server.Models.Customer", "CustomerNavigation")
                    .WithMany("CustomersCertificates")
                    .HasForeignKey("Customer")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired()
                    .HasConstraintName("FK__Customers__custo__46E78A0C");

                b.HasOne("TurkAk.Server.Models.NewDeviceType", "DeviceTypeNavigation")
                    .WithMany("CustomersCertificates")
                    .HasForeignKey("DeviceType")
                    .IsRequired()
                    .HasConstraintName("FK__Customers__devic__47DBAE45");

                b.HasOne("TurkAk.Server.Models.ReferenceDeviceAdd", "ReferenceCalibratorNavigation")
                    .WithMany("CustomersCertificates")
                    .HasForeignKey("ReferenceCalibrator")
                    .IsRequired()
                    .HasConstraintName("FK__Customers__refer__48CFD27E");

                b.Navigation("CalibratorEmployeeNavigation");

                b.Navigation("CustomerNavigation");

                b.Navigation("DeviceTypeNavigation");

                b.Navigation("ReferenceCalibratorNavigation");
            });

            modelBuilder.Entity("TurkAk.Server.Models.NewDeviceType", b =>
            {
                b.HasOne("TurkAk.Server.Models.ReferenceDeviceAdd", "ReferenceCalibratorNavigation")
                    .WithMany("NewDeviceTypes")
                    .HasForeignKey("ReferenceCalibrator")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired()
                    .HasConstraintName("FK__NewDevice__refer__3C69FB99");

                b.Navigation("ReferenceCalibratorNavigation");
            });

            modelBuilder.Entity("TurkAk.Server.Models.Customer", b =>
            {
                b.Navigation("CustomersCertificates");
            });

            modelBuilder.Entity("TurkAk.Server.Models.Employee", b =>
            {
                b.Navigation("CustomersCertificates");
            });

            modelBuilder.Entity("TurkAk.Server.Models.NewDeviceType", b =>
            {
                b.Navigation("CustomersCertificates");
            });

            modelBuilder.Entity("TurkAk.Server.Models.ReferenceDeviceAdd", b =>
            {
                b.Navigation("CustomersCertificates");

                b.Navigation("NewDeviceTypes");
            });
#pragma warning restore 612, 618
        }
    }
}
